{"version":3,"sources":["components/Header.js","components/Footer.js","components/Bars/Bars.js","Algorithms/BubbleSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","App.js","reportWebVitals.js","index.js"],"names":["selectStyle","Header","randomArrayGenerator","handleLength","arrayLength","handleSpeed","speed","handleAlgorithm","handleSort","sorting","completed","algorithm","Navbar","bg","variant","expand","Container","Brand","href","style","fontSize","Toggle","Collapse","className","Nav","Button","fontWeight","onClick","disabled","onChange","value","Form","Row","Col","Group","controlId","htmlFor","type","id","min","max","step","Math","ceil","Footer","target","rel","margin","Bars","props","bars","compare","sorted","swap","width","map","bar","index","height","barBackground","includes","styles","backgroundColor","array","a","b","temp","bubbleSort","barsCopy","slice","animationArray","i","length","j","push","mergeSortHelper","l","r","mid","floor","arr","merge","mergeSort","quickSortHelper","pivot","random","m","partition","quickSort","App","useState","setBars","setArrayLength","setAlgorithm","setSorting","setCompleted","setSpeed","setCompare","setSwap","sortedIndex","setSortedIndex","randomIntFromInterval","randomArray","useEffect","e","Number","event","sortAccOrder","order","loop","setTimeout","k","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8d12ba8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Container, Navbar, Nav, Button, Form, Row, Col } from 'react-bootstrap';\r\nconst selectStyle = {\r\n    'fontWeight': '600',\r\n    'borderRadius': '0.25rem'\r\n}\r\nconst Header = ({ randomArrayGenerator, handleLength, arrayLength, handleSpeed, speed, handleAlgorithm, handleSort, sorting, completed, algorithm }) => {\r\n\r\n    return (\r\n        // background color #222 if you need a different navbar\r\n        <Navbar bg=\"dark\" variant=\"dark\" expand='lg'>\r\n            <Container>\r\n                <Navbar.Brand href=\"#home\" style={{ fontSize: '2.25rem' }}>Sorting Visualizer</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse className='justify-content-end'>\r\n                    <Nav>\r\n                        <Button variant=\"outline-info\" className='m-3' style={{ fontWeight: '600' }} onClick={randomArrayGenerator} disabled={sorting}>New Array</Button>\r\n\r\n                        <select className='my-3 mx-2 me-3 px-3' style={selectStyle} onChange={handleAlgorithm} disabled={sorting} value={algorithm}>\r\n                            <option value='bubbleSort'>Bubble Sort</option>\r\n                            <option value='mergeSort'>Merge Sort</option>\r\n                            <option value='quickSort'>Quick Sort</option>\r\n                        </select>\r\n\r\n                        <Form>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Form.Group className=\"mx-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                        <label htmlFor=\"customRange1\" className=\"form-label\">Length - {arrayLength}</label>\r\n                                        <input type=\"range\" className=\"custom-range\" id=\"customRange1\" min='10' max='200' step='1' onChange={handleLength} value={arrayLength} disabled={sorting} />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Group className=\"mx-2\" controlId=\"exampleForm.ControlTextarea1\">\r\n                                        <label htmlFor=\"customRange2\" className=\"form-label\">Speed</label>\r\n                                        <input type=\"range\" className=\"custom-range\" id=\"customRange2\" onChange={handleSpeed} min='1' max='100' value={Math.ceil(400 / speed)} disabled={sorting} />\r\n                                    </Form.Group>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n\r\n                        <Button variant=\"outline-success\" className='px-5 m-3' style={{ fontWeight: '600' }}\r\n                            onClick={handleSort} disabled={sorting || completed}>Sort</Button>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { FaGithub } from 'react-icons/fa';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <Row>\r\n            <Col className='text-center py-3'>\r\n                Made with ❤️ by Darshit Singh\r\n                <br />\r\n                <a href=\"https://github.com/darshit-singh/algorithm-visualizer-react\" target=\"_blank\" rel=\"noopener noreferrer\"> <FaGithub style={{ margin: '0 5px 2px 0' }} />Source Code</a>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport './Bars.css'\r\n\r\nconst Bars = (props) => {\r\n    let { bars, arrayLength, compare, sorted, swap } = props;\r\n    // let barBackground = '#3498db'; //blue\r\n    // let barBackground = '#b85482'; //pink\r\n    // let barBackground = '#00bc8c'; //green\r\n\r\n    let width = '1.5rem'; // width of each bar\r\n\r\n    if (arrayLength > 40 && arrayLength <= 100) {\r\n        width = '1rem'\r\n    } else if (arrayLength > 100) {\r\n        width = '0.5rem'\r\n    }\r\n\r\n    return (\r\n        <div className='arrayContainer'>\r\n            {bars.map((bar, index) => {\r\n                let height = ''\r\n                //a bar's height is the array number in rem\r\n                if (arrayLength > 40) {\r\n                    height = `${(bar * 42) / 200}rem`\r\n                }\r\n                else {\r\n                    height = `${bar}rem`\r\n                }\r\n                let barBackground = '#3498db'; //default -blue\r\n\r\n                // i th element is being compared with the other element -pink\r\n                if (compare && (index === compare[0] || index === compare[1])) {\r\n                    barBackground = '#b85482'\r\n                }\r\n\r\n                //swapping -yellow\r\n                if (swap && (index === swap[0] || index === swap[1])) {\r\n                    barBackground = 'yellow'\r\n                }\r\n                // i th element is in sorted position -gren\r\n                if (sorted && sorted.includes(index)) {\r\n                    barBackground = '#00bc8c'\r\n                }\r\n                const styles = {\r\n                    bar: {\r\n                        backgroundColor: barBackground,\r\n                        height: height,\r\n                        width: width\r\n                    }\r\n                }\r\n                return (\r\n                    <div key={index} className='bar' style={styles.bar}>\r\n                        {arrayLength <= 40 ? bar : ''}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bars\r\n","const swap = (array, a, b) => {\r\n    const temp = array[a];\r\n    array[a] = array[b];\r\n    array[b] = temp;\r\n}\r\n\r\nconst bubbleSort = (bars) => {\r\n    const barsCopy = bars.slice();\r\n    const animationArray = [];\r\n\r\n    for (var i = 0; i < barsCopy.length; i++) {\r\n        for (var j = 0; j < barsCopy.length - i - 1; j++) {\r\n            animationArray.push([j, j + 1, null, null]) // Comparision snapshot\r\n            let first = barsCopy[j];\r\n            let second = barsCopy[j + 1];\r\n            if (first > second) {\r\n                swap(barsCopy, j, j + 1); //barsCopy is mutated\r\n                animationArray.push([j, j + 1, barsCopy.slice(), null]); // Swapped snapshot\r\n            }\r\n        }\r\n        animationArray.push([null, null, null, j]); //jth element is in correct(sorted) position\r\n    }\r\n    return animationArray\r\n}\r\n\r\nexport default bubbleSort","let animationArray = []\n\nconst merge = (barsCopy, l, mid, r) => {\n  let i = l,\n    j = mid + 1\n\n  const arr = []\n\n  while (i <= mid && j <= r) {\n    animationArray.push([i, j, null, null]) // comparision snapshot\n    if (barsCopy[i] <= barsCopy[j]) {\n      arr.push(barsCopy[i++])\n    } else {\n      arr.push(barsCopy[j++])\n    }\n  }\n\n  while (i <= mid) {\n    animationArray.push([i, null, null, null])\n    arr.push(barsCopy[i++])\n  }\n\n  while (j <= r) {\n    animationArray.push([null, j, null, null])\n    arr.push(barsCopy[j++])\n  }\n\n  for (i = l; i <= r; i++) {\n    barsCopy[i] = arr[i - l]\n    animationArray.push([i, null, barsCopy.slice(), null])\n  }\n}\n\nconst mergeSortHelper = (barsCopy, l, r) => {\n  if (l >= r) return\n\n  const mid = Math.floor((l + r) / 2)\n\n  mergeSortHelper(barsCopy, l, mid)\n  mergeSortHelper(barsCopy, mid + 1, r)\n\n  merge(barsCopy, l, mid, r)\n}\n\nconst mergeSort = (bars) => {\n  animationArray = []\n  const barsCopy = bars.slice()\n\n  mergeSortHelper(barsCopy, 0, barsCopy.length - 1)\n\n  for (let i = 0; i < barsCopy.length; i++) {\n    animationArray.push([null, null, null, i]) // i th element will be in correct(sorted) position\n  }\n\n  return animationArray\n}\n\nexport default mergeSort\n","let animationArray = []\n\nconst swap = (array, a, b) => {\n  const temp = array[a]\n  array[a] = array[b]\n  array[b] = temp\n}\n\nconst partition = (barsCopy, l, r) => {\n  const pivot = l\n  let j = l\n\n  for (let i = l + 1; i <= r; i++) {\n    animationArray.push([i, pivot, null, null])\n    if (barsCopy[i] < barsCopy[pivot]) {\n      j += 1\n      swap(barsCopy, i, j)\n      animationArray.push([i, j, barsCopy.slice(), null])\n    }\n  }\n\n  swap(barsCopy, pivot, j)\n  animationArray.push([pivot, j, barsCopy.slice(), null])\n  animationArray.push([null, null, null, j]) //jth element is in correct(sorted) position\n  return j\n}\n\nconst quickSortHelper = (barsCopy, l, r) => {\n  if (l >= r) {\n    if (l === r) animationArray.push([null, null, null, l])\n    return\n  }\n\n  const pivot = l + Math.floor(Math.random() * (r - l))\n\n  swap(barsCopy, l, pivot)\n  animationArray.push([l, pivot, barsCopy.slice(), null])\n\n  const m = partition(barsCopy, l, r)\n\n  quickSortHelper(barsCopy, l, m - 1)\n  quickSortHelper(barsCopy, m + 1, r)\n\n  return\n}\n\nconst quickSort = (bars) => {\n  const barsCopy = bars.slice()\n  animationArray = []\n\n  quickSortHelper(barsCopy, 0, barsCopy.length - 1)\n\n  return animationArray\n}\n\nexport default quickSort\n","import './App.css';\r\nimport React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Bars from './components/Bars/Bars';\r\nimport bubbleSort from './Algorithms/BubbleSort';\r\nimport mergeSort from './Algorithms/MergeSort';\r\nimport quickSort from './Algorithms/QuickSort';\r\n\r\nconst App = () => {\r\n    //states\r\n    const [bars, setBars] = useState([]); //actual random array\r\n    const [arrayLength, setArrayLength] = useState(40);\r\n    const [algorithm, setAlgorithm] = useState('bubbleSort');\r\n    const [sorting, setSorting] = useState(false) // if sorting is happening\r\n    const [completed, setCompleted] = useState(true) // sorting completed\r\n    const [speed, setSpeed] = useState(250)\r\n    const [compare, setCompare] = useState([])\r\n    const [swap, setSwap] = useState([])\r\n    const [sortedIndex, setSortedIndex] = useState([])\r\n\r\n    const randomArrayGenerator = (arrayLength) => {\r\n        setCompleted(false)\r\n        setSorting(false)\r\n        setSortedIndex([])\r\n        function randomIntFromInterval(min, max) { // min and max included \r\n            return Math.floor(Math.random() * (max - min + 1) + min)\r\n        }\r\n        let randomArray = [];\r\n\r\n        if (arrayLength > 40) //random numbers go up to 200 if length is more than 40\r\n            for (let i = 0; i < arrayLength; i++) {\r\n                randomArray.push(randomIntFromInterval(1, 200))\r\n            }\r\n        else                  //random numbers generated between 1 and 42\r\n            for (let i = 0; i < arrayLength; i++) {\r\n                randomArray.push(randomIntFromInterval(1, 42))\r\n            }\r\n        setBars(randomArray); //makes bars = randomArray generated\r\n    }\r\n\r\n    //sets length to the selected value\r\n    const handleLength = (e) => {\r\n        setArrayLength(Number(e.target.value))\r\n    }\r\n\r\n    //sets algorithm to the selected value\r\n    const handleAlgorithm = (e) => {\r\n        setAlgorithm(e.target.value)\r\n    }\r\n\r\n    //sets speed to the selected value\r\n    const handleSpeed = (event) => {\r\n        setSpeed(Math.ceil(400 / Number(event.target.value)))\r\n    }\r\n\r\n    const handleSort = () => {\r\n        const sortAccOrder = (order) => {\r\n            (function loop(i) {\r\n                setTimeout(function () {\r\n                    const [j, k, arr, index] = order[i]\r\n                    setCompare([j, k])\r\n                    setSwap([])\r\n\r\n                    if (index !== null) {\r\n                        setSortedIndex((prevState) => [...prevState, index])\r\n                    }\r\n\r\n                    if (arr) {\r\n                        setBars(arr)\r\n                        if (j !== null || k != null) setSwap([j, k])\r\n                    }\r\n\r\n                    if (++i < order.length) {\r\n                        loop(i)\r\n                    } else {\r\n                        setSorting(false)\r\n                        setCompleted(true)\r\n                    }\r\n                }, speed)\r\n            })(0) //IIFE, starting value of i = 0\r\n        }\r\n\r\n        setSorting(true)\r\n\r\n        algorithm === 'bubbleSort'\r\n            ? sortAccOrder(bubbleSort(bars))\r\n            : algorithm === 'mergeSort'\r\n                ? sortAccOrder(mergeSort(bars))\r\n                : algorithm === 'quickSort'\r\n                    ? sortAccOrder(quickSort(bars))\r\n                    : (() => {\r\n                        setSorting(false)\r\n                        setCompleted(true)\r\n                    })()\r\n    }\r\n\r\n    useEffect(() => {\r\n        randomArrayGenerator(arrayLength)\r\n    }, [arrayLength])\r\n\r\n    return (\r\n        <div>\r\n            <Header\r\n                randomArrayGenerator={() => randomArrayGenerator(arrayLength)}\r\n                handleLength={handleLength}\r\n                arrayLength={arrayLength}\r\n                handleAlgorithm={handleAlgorithm}\r\n                handleSpeed={handleSpeed}\r\n                handleSort={handleSort}\r\n                sorting={sorting}\r\n                completed={completed}\r\n                speed={speed}\r\n                algorithm={algorithm}\r\n            />\r\n            <Container>\r\n                <main>\r\n                    <Bars\r\n                        bars={bars}\r\n                        arrayLength={arrayLength}\r\n                        compare={sorting && compare}\r\n                        swap={sorting && swap}\r\n                        sorted={sortedIndex} />\r\n                    <hr />\r\n                </main>\r\n                <Footer />\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}